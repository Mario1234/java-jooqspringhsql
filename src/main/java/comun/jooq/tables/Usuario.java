/*
 * This file is generated by jOOQ.
 */
package comun.jooq.tables;


import comun.jooq.Indexes;
import comun.jooq.Keys;
import comun.jooq.Public;
import comun.jooq.tables.records.UsuarioRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usuario extends TableImpl<UsuarioRecord> {

    private static final long serialVersionUID = 1072390123;

    /**
     * The reference instance of <code>PUBLIC.USUARIO</code>
     */
    public static final Usuario USUARIO = new Usuario();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsuarioRecord> getRecordType() {
        return UsuarioRecord.class;
    }

    /**
     * The column <code>PUBLIC.USUARIO.ID</code>.
     */
    public final TableField<UsuarioRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PUBLIC.USUARIO.NOMBRE</code>.
     */
    public final TableField<UsuarioRecord, String> NOMBRE = createField(DSL.name("NOMBRE"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>PUBLIC.USUARIO.APELLIDO</code>.
     */
    public final TableField<UsuarioRecord, String> APELLIDO = createField(DSL.name("APELLIDO"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * Create a <code>PUBLIC.USUARIO</code> table reference
     */
    public Usuario() {
        this(DSL.name("USUARIO"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.USUARIO</code> table reference
     */
    public Usuario(String alias) {
        this(DSL.name(alias), USUARIO);
    }

    /**
     * Create an aliased <code>PUBLIC.USUARIO</code> table reference
     */
    public Usuario(Name alias) {
        this(alias, USUARIO);
    }

    private Usuario(Name alias, Table<UsuarioRecord> aliased) {
        this(alias, aliased, null);
    }

    private Usuario(Name alias, Table<UsuarioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Usuario(Table<O> child, ForeignKey<O, UsuarioRecord> key) {
        super(child, key, USUARIO);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_IDX_SYS_PK_10091_10092);
    }

    @Override
    public UniqueKey<UsuarioRecord> getPrimaryKey() {
        return Keys.SYS_PK_10091;
    }

    @Override
    public List<UniqueKey<UsuarioRecord>> getKeys() {
        return Arrays.<UniqueKey<UsuarioRecord>>asList(Keys.SYS_PK_10091);
    }

    @Override
    public Usuario as(String alias) {
        return new Usuario(DSL.name(alias), this);
    }

    @Override
    public Usuario as(Name alias) {
        return new Usuario(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Usuario rename(String name) {
        return new Usuario(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Usuario rename(Name name) {
        return new Usuario(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
